name: Weekly Schedule

on:
  schedule:
    - cron: '27 20 * * *'

  workflow_dispatch:
    inputs:
      suite:
        description: 'Suite'
        required: true
        default: 'regression'
        type: choice
        options: [ bvt, regression ]

      environment:
        description: 'Environment'
        required: true
        default: 'prod-av'
        type: choice
        options: [ dev, stage, prod, prod-av ]

      browser:
        description: 'Browser'
        required: true
        default: 'chromium'
        type: choice
        options: [ chromium, firefox, webkit ]

      user_type:
        description: 'User Type'
        required: true
        default: 'a'
        type: choice
        options: [ a, b, c ]

      detailed_testing:
        description: 'Detailed Testing'
        required: true
        default: 'false'
        type: choice
        options: [ 'true', 'false' ]

      company_id:
        description: 'Enter company id for detailed testing'
        required: false
        default: '100'
        type: string

      number_of_companies:
        description: 'Number of Companies'
        required: true
        default: '5'
        type: choice
        options: [ '1','2','3','4','5' ]

      ui_pages:
        description: 'Number of Pages for UI Tests'
        required: true
        default: '1'
        type: choice
        options: [ '1','2','3' ]

      api_pages:
        description: 'Number of Pages for API Tests'
        required: true
        default: '1'
        type: choice
        options: [ '1','2','3' ]

permissions:
  contents: write

env:
  SHARD_COUNT: 2

jobs:
  weekly_schedule:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        shard: [ 0,1 ]

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-shard

      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=$(pwd)" >> $GITHUB_ENV

      - name: Set environment variables
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "suite=${{ github.event.inputs.suite }}" >> $GITHUB_ENV
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
            echo "browser=${{ github.event.inputs.browser }}" >> $GITHUB_ENV
            echo "detailed_testing=${{ github.event.inputs.detailed_testing }}" >> $GITHUB_ENV
            echo "company_id=${{ github.event.inputs.company_id }}" >> $GITHUB_ENV
            echo "number_of_companies=${{ github.event.inputs.number_of_companies }}" >> $GITHUB_ENV
            echo "user_type=${{ github.event.inputs.user_type }}" >> $GITHUB_ENV
            echo "ui_pages=${{ github.event.inputs.ui_pages }}" >> $GITHUB_ENV
            echo "api_pages=${{ github.event.inputs.api_pages }}" >> $GITHUB_ENV
          elif [ "${{ github.event_name }}" = "schedule" ]; then
            echo "suite=regression" >> $GITHUB_ENV
            echo "environment=prod-av" >> $GITHUB_ENV
          fi

      - name: Clean old Allure results
        run: rm -rf features/reports/allure-results/*

      - name: Run Pytest Shard
        run: |
          ALLURE_DIR=features/reports/allure-results/${{ matrix.shard }}
          mkdir -p $ALLURE_DIR
          pytest -m "$suite and not no_shard" --alluredir=$ALLURE_DIR --num-shards=$SHARD_COUNT --shard-id=${{ matrix.shard }} || ([ $? -eq 5 ] && exit 0)
          if [ "$suite" = "regression" ] && [ "${{ matrix.shard }}" = "0" ]; then
            pytest -m "no_shard" || ([ $? -eq 5 ] && exit 0)
          fi

      - name: Upload Allure Shard
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-regression-${{ matrix.shard }}
          path: features/reports/allure-results/${{ matrix.shard }}/*
          retention-days: 7
